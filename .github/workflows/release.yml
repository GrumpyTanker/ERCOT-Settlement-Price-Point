name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.1.0)'
        required: true
        type: string

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
      
      - name: Verify version matches manifest
        run: |
          MANIFEST_VERSION=$(jq -r '.version' custom_components/ercot_spp/manifest.json)
          if [ "${{ steps.get_version.outputs.version_number }}" != "$MANIFEST_VERSION" ]; then
            echo "Error: Tag version (${{ steps.get_version.outputs.version_number }}) does not match manifest.json version ($MANIFEST_VERSION)"
            exit 1
          fi
      
      - name: Extract release notes
        id: extract_notes
        run: |
          VERSION="${{ steps.get_version.outputs.version_number }}"
          if [ -f ".github/RELEASE_NOTES_v${VERSION}.md" ]; then
            echo "notes_file=.github/RELEASE_NOTES_v${VERSION}.md" >> $GITHUB_OUTPUT
          else
            echo "No release notes file found for version ${VERSION}"
            echo "notes_file=" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release Archive
        run: |
          mkdir -p release
          cd custom_components
          zip -r ../release/ercot_spp.zip ercot_spp
          cd ..
      
      - name: Generate changelog excerpt
        id: changelog
        run: |
          VERSION="${{ steps.get_version.outputs.version_number }}"
          if [ -f "CHANGELOG.md" ]; then
            # Extract the section for this version from CHANGELOG.md
            awk "/^## \[${VERSION}\]/,/^## \[/" CHANGELOG.md | sed '$d' > release_excerpt.md
            if [ ! -s release_excerpt.md ]; then
              echo "## What's Changed" > release_excerpt.md
              echo "" >> release_excerpt.md
              echo "See CHANGELOG.md for details." >> release_excerpt.md
            fi
          else
            echo "## What's Changed" > release_excerpt.md
            echo "" >> release_excerpt.md
            echo "See documentation for details." >> release_excerpt.md
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body_path: ${{ steps.extract_notes.outputs.notes_file || 'release_excerpt.md' }}
          files: |
            release/ercot_spp.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update latest tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -f latest
          git push -f origin latest
